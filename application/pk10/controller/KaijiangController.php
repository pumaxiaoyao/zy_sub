<?php
/**
 * Created by PhpStorm.
 * User: fish
 * Date: 2018/3/7
 * Time: 16:02
 */

namespace app\pk10\controller;


use app\api\model\AccMoney;
use app\api\model\AccMychg;
use app\api\model\AccUsers;
use app\pk10\model\Pk10Lottery;
use app\pk10\model\Pk10Order;
use think\Config;
use app\auth\controller\BaseController;

class KaijiangController extends BaseController
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        Config::load(APP_PATH . 'pk10/config.php');
    }

    /**
     * 最新开奖
     * @return array
     * @throws \think\Exception
     * @throws \think\exception\DbException
     */
    public function lastLty()
    {
        $lastLottery             = Pk10Lottery::getLastest()->toArray();
        $details = $this->pk10Result($lastLottery['opencode']);
        $lastLottery['opencode'] = explode(',', $lastLottery['opencode']);
        $lastLottery['details']  = $details;
        $lastLottery['code']     = 'pk10';

        $get = request()->only('range', 'get');
        $error = $this->validate($get, [
            'range' => 'alphaDash'
        ]);
        if (true !== $error) {
            $this->jsonData['status'] = 0;
            $this->jsonData['msg'] = $error;
            return $this->jsonData;
        }
        $range = isset($get['range']) ? $get['range'] : 'all';
        $where = [];
        $where['tokenint'] = $this->user->tokenint;
        if ('all' !== $range)
        {
            $timeRange = get_time_range($range);
            $where['create_time'] = ['between' , [$timeRange['start'], $timeRange['end']]];
        }
        $unclearMoney = Pk10Order::getUnclearMoney($where);
        $lastLottery['unclear_money'] = $unclearMoney;

        return $lastLottery;
    }

    /**
     * 开奖
     * @return string
     * @throws \think\exception\DbException
     */
    public function kjPk10()
    {
        echo "bjpk10\tstart\tkaijiang...\n";
        $start     = time();
        $lastest   = Pk10Lottery::getLastest();
        $expect    = $lastest['expect'];
        $open_code = $lastest['opencode'];
        // 检查是否已经开奖的
        if (Pk10Lottery::expectLotteried($expect)) {
            echo "[ " . $expect . " ]  \tAlready Lottery \n";
        }

        // 开奖结果
        $result = $this->pk10Result($open_code);
        // 兑奖
        $msg = $this->setLucky($lastest, $result);
        // 更新开奖状态
        $lottery             = Pk10Lottery::getByExpect($expect);
        $lottery->is_lottery = 1;
        $lottery->save();
        $end    = time();
        $offset = $end - $start;
        echo "bjpk10\t" . $msg . "\t" . "Lottery Successful\t[Time: {$offset} s]\n\n";
    }

    /**
     * 开奖
     * @return string
     * @throws \think\exception\DbException
     */
    public function lottery()
    {
        $lastest   = Pk10Lottery::getLastest();
        $expect    = $lastest['expect'];
        $open_code = $lastest['opencode'];
        // 检查是否已经开奖的
        if (Pk10Lottery::expectLotteried($expect)) {
            return "[ " . $expect . " ]  \tAlready Lottery ";
        }

        // 开奖结果
        $result = $this->pk10Result($open_code);
        // 兑奖
        $msg = $this->setLucky($lastest, $result);
        // 更新开奖状态
        $lottery             = Pk10Lottery::getByExpect($expect);
        $lottery->is_lottery = 1;
        $lottery->save();

        return $msg . "\t" . 'Lottery Successful';
    }

    /**
     * 开奖
     *
     * @return array
     * @throws \think\exception\DbException
     */
    public function manualLottery()
    {
        $start     = time();
        $lastest   = Pk10Lottery::getLastest();
        $expect    = $lastest['expect'];
        $open_code = $lastest['opencode'];
        // 检查是否已经开奖的
        if (Pk10Lottery::expectLotteried($expect)) {
            return [
                'code' => 0,
                'msg'  => "北京PK10 [ " . $expect . " ]  已经开奖"
            ];
        }

        // 开奖结果
        $result = $this->pk10Result($open_code);
        // 兑奖
        $msg = $this->setLucky($lastest, $result);
        // 更新开奖状态
        $lottery             = Pk10Lottery::getByExpect($expect);
        $lottery->is_lottery = 1;
        $lottery->save();

        $end    = time();
        $offset = $end - $start;

        return [
            'code' => 1,
            'msg'  => "北京PK10 " . $msg . " 开奖成功 [Time: " . $offset . " s]"
        ];
    }

    /**
     * 派奖
     *
     * @param $lastest
     * @param $result
     *
     * @return string
     * @throws \think\exception\DbException
     */
    private function setLucky($lastest, $result)
    {

        $expect = $lastest['expect'];
        $config = config('pk10_open_type');

        // 获取所有本期未开奖注单
        $orders     = Pk10Order::getNotOpenOrdersByExpect($expect);
        $orders_num = count($orders);

        if (empty($orders->toArray())) {
            return '[ ' . $expect . ' ] has no orders';
        }

        // 遍历注单
        $upd_orders = [];
        foreach ($orders as $order) {
            $upd_order['id'] = $order->id;
            $type            = array_search($order['mark_a'], $config);
            $bet_contents    = $result[$type];
            if (in_array($order['mark_b'], $bet_contents)) {
                $upd_order['open_ret'] = 1;
                $upd_order['open_win'] = $order['win'] - $order['money'];
                $this->setBonus($order);
            } else {
                $upd_order['open_ret'] = 0;
                $upd_order['open_win'] = 0 - $order['money'];
            }
            $upd_order['open_code']   = $lastest['opencode'];
            $upd_order['open_stu']    = 1;
            $upd_order['status']      = 1;
            $upd_order['update_time'] = time();
            unset($upd_order['create_time']);
            array_push($upd_orders, $upd_order);
            // 返水，无关是否中奖
            $this->setFs($order);
        }
        $orderModel = new Pk10Order();
        $orderModel->isUpdate()->saveAll($upd_orders);

        return "[ " . $expect . " ] $orders_num 注订单";
    }

    /**
     * @param $order
     *
     * @throws \think\exception\DbException
     */
    private function setFs($order)
    {
        $user = AccUsers::getUserByTokenint($order->tokenint);
        $this->addFs($user, $order);
        if ($user->admin) {
            $admin = AccUsers::get($user->admin);
            $this->addFs($admin, $order);
        }
        if ($user->manager) {
            $manager = AccUsers::get($user->manager);
            $this->addFs($manager, $order);
        }
        if ($user->agent) {
            $agent = AccUsers::get($user->agent);
            $this->addFs($agent, $order);
        }
    }

    /**
     * @param $user
     * @param $order
     *
     * @throws \think\exception\DbException
     */
    private function addFs($user, $order)
    {
        $userMoney = AccMoney::getMoneyByUser($user->tokenint);
        if (!$userMoney) {
            AccMoney::initMoney($user);
        }
        $chg = 0;
        switch ($user->type) {
            case 3:
                $chg = $order->fs_gv;
                break;
            case 2:
                $chg = $order->fs_mv;
                break;
            case 1:
                $chg = $order->fs_av;
                break;
            case 0:
                $chg = $order->fs_sv;
                break;
        }
        $chg_column['tokenint']     = $user->tokenint;
        $chg_column['username']     = $user->username;
        $chg_column['nickname']     = $user->nickname;
        $chg_column['c_type']       = CHG_BET_FS;
        $chg_column['c_old']        = AccMoney::getCashByUser($user->tokenint);
        $chg_column['chg']          = $chg;
        $chg_column['cur']          = $chg_column['c_old'] + $chg_column['chg'];
        $chg_column['con']          = '北京PK拾下注返水';
        $chg_column['opr_tokenint'] = '';
        $chg_column['opr_nickname'] = '';
        $chg_column['opr_username'] = '';
        $chg_column['opr_ip']       = request()->ip();
        $chg_column['opr_time']     = get_cur_date();
        $chg_column['opr_mark']     = $order->order_no;
        $chg_id                     = add_chg($chg_column);

        $chg = AccMychg::get($chg_id);
        // 更新用户余额
        upd_money($chg->tokenint, $chg->cur);
    }


    /**
     * 发放奖金
     *
     * @param $order
     *
     * @throws \think\exception\DbException
     */
    private function setBonus($order)
    {
        $user                       = AccUsers::getUserByTokenint($order->tokenint);
        $chg_column['tokenint']     = $user->tokenint;
        $chg_column['username']     = $user->username;
        $chg_column['nickname']     = $user->nickname;
        $chg_column['c_type']       = CHG_BET_LUCKY;
        $chg_column['c_old']        = AccMoney::getCashByUser($user->tokenint);
        $chg_column['chg']          = $order->win;
        $chg_column['cur']          = $chg_column['c_old'] + $chg_column['chg'];
        $chg_column['con']          = '北京PK拾中奖';
        $chg_column['opr_tokenint'] = '';
        $chg_column['opr_nickname'] = '';
        $chg_column['opr_username'] = '';
        $chg_column['opr_ip']       = request()->ip();
        $chg_column['opr_time']     = get_cur_date();
        $chg_column['opr_mark']     = '订单号：' . $order->order_no;
        $chg_id                     = add_chg($chg_column);

        $chg = AccMychg::get($chg_id);
        // 更新用户余额
        upd_money($chg->tokenint, $chg->cur);
    }

    /**
     * 暴露给外部调用
     *
     * @param $open_code
     *
     * @return array
     */
    public function getPk10Result($open_code)
    {
        return $this->pk10Result($open_code);
    }

    /**
     * 开奖结果
     *
     * @param $open_code
     *
     * @return array
     */
    private function pk10Result($open_code)
    {
        $open_codes = explode(',', $open_code);

        $ret = [];
        // 冠军
        $ret['ball_1'] = $this->generateSingleRes($open_codes[0], $open_codes[9]);

        // 亚军
        $ret['ball_2'] = $this->generateSingleRes($open_codes[1], $open_codes[8]);

        // 第三名
        $ret['ball_3'] = $this->generateSingleRes($open_codes[2], $open_codes[7]);

        // 第四名
        $ret['ball_4'] = $this->generateSingleRes($open_codes[3], $open_codes[6]);

        // 第五名
        $ret['ball_5'] = $this->generateSingleRes($open_codes[4], $open_codes[5]);

        // 第六名
        $ret['ball_6'] = $this->generateSingleRes($open_codes[5]);

        // 第七名
        $ret['ball_7'] = $this->generateSingleRes($open_codes[6]);

        // 第八名
        $ret['ball_8'] = $this->generateSingleRes($open_codes[7]);

        // 第九名
        $ret['ball_9'] = $this->generateSingleRes($open_codes[8]);

        // 第十名
        $ret['ball_10'] = $this->generateSingleRes($open_codes[9]);

        $sum = $open_codes[0] + $open_codes[1];

        // 冠亚军和
        $ret['sum'] = $this->generateSum($sum);

        return $ret;
    }

    /**
     * 计算特码的大小单双龙虎
     *
     * @param      $code
     * @param null $code2
     *
     * @return array
     */
    private function generateSingleRes($code, $code2 = null)
    {
        $ret = [];
        array_push($ret, $code);

        if ($code % 2 === 0) {
            array_push($ret, '双');
        } else {
            array_push($ret, '单');
        }

        if ($code <= 5) {
            array_push($ret, '小');
        } else {
            array_push($ret, '大');
        }

        if (!is_null($code2)) {
            if ($code > $code2) {
                array_push($ret, '龙');
            } else {
                array_push($ret, '虎');
            }
        }

        return $ret;
    }

    /**
     * 计算和的大小单双
     *
     * @param $sum
     *
     * @return array
     */
    private function generateSum($sum)
    {
        $ret = [];
        array_push($ret, $sum);

        if ($sum % 2 === 0) {
            array_push($ret, '双');
        } else {
            array_push($ret, '单');
        }

        if ($sum <= 10) {
            array_push($ret, '小');
        } else {
            array_push($ret, '大');
        }

        return $ret;
    }

    /**
     * 长龙统计
     *
     * @return void
     */
    public function longDragon()
    {
        $return = [];
        $lotteries = Pk10Lottery::getToday();

        $ball_1_big_small = [];
        $ball_1_even_odd = [];
        $ball_1_dragon_tiger = [];

        $ball_2_big_small = [];
        $ball_2_even_odd = [];
        $ball_2_dragon_tiger = [];

        $ball_3_big_small = [];
        $ball_3_even_odd = [];
        $ball_3_dragon_tiger = [];

        $ball_4_big_small = [];
        $ball_4_even_odd = [];
        $ball_4_dragon_tiger = [];

        $ball_5_big_small = [];
        $ball_5_even_odd = [];
        $ball_5_dragon_tiger = [];

        $ball_6_big_small = [];
        $ball_6_even_odd = [];

        $ball_7_big_small = [];
        $ball_7_even_odd = [];

        $ball_8_big_small = [];
        $ball_8_even_odd = [];

        $ball_9_big_small = [];
        $ball_9_even_odd = [];

        $ball_10_big_small = [];
        $ball_10_even_odd = [];

        $sum_big_small = [];
        $sum_even_odd = [];


        foreach ($lotteries as $key => $lottery) {
            $result = $this->pk10Result($lottery->opencode);
            // print_r($result);exit;
            // 两面
            array_push($ball_1_big_small, $result['ball_1'][2]);
            array_push($ball_1_even_odd, $result['ball_1'][1]);
            array_push($ball_1_dragon_tiger, $result['ball_1'][3]);
            
            array_push($ball_2_big_small, $result['ball_2'][2]);
            array_push($ball_2_even_odd, $result['ball_2'][1]);
            array_push($ball_2_dragon_tiger, $result['ball_2'][3]);
            
            array_push($ball_3_big_small, $result['ball_3'][2]);
            array_push($ball_3_even_odd, $result['ball_3'][1]);
            array_push($ball_3_dragon_tiger, $result['ball_3'][3]);
            
            array_push($ball_4_big_small, $result['ball_4'][2]);
            array_push($ball_4_even_odd, $result['ball_4'][1]);
            array_push($ball_4_dragon_tiger, $result['ball_4'][3]);
            
            array_push($ball_5_big_small, $result['ball_5'][2]);
            array_push($ball_5_even_odd, $result['ball_5'][1]);
            array_push($ball_5_dragon_tiger, $result['ball_5'][3]);
            
            array_push($ball_6_big_small, $result['ball_6'][2]);
            array_push($ball_6_even_odd, $result['ball_6'][1]);
            
            array_push($ball_7_big_small, $result['ball_7'][2]);
            array_push($ball_7_even_odd, $result['ball_7'][1]);
            
            array_push($ball_8_big_small, $result['ball_8'][2]);
            array_push($ball_8_even_odd, $result['ball_8'][1]);
            
            array_push($ball_9_big_small, $result['ball_9'][2]);
            array_push($ball_9_even_odd, $result['ball_9'][1]);
            
            array_push($ball_10_big_small, $result['ball_10'][2]);
            array_push($ball_10_even_odd, $result['ball_10'][1]);
            
            array_push($sum_big_small, $result['sum'][2]);
            array_push($sum_even_odd, $result['sum'][1]);
        }
        $ball_1_big_small = $this->calcBigAndSmallMost($ball_1_big_small, "冠军-");
        $ball_1_even_odd = $this->calcOddAndEvenMost($ball_1_even_odd, "冠军-");
        $ball_1_dragon_tiger = $this->calcSumDragonTigerMost($ball_1_dragon_tiger, "冠军-");
        
        $ball_2_big_small = $this->calcBigAndSmallMost($ball_2_big_small, "亚军-");
        $ball_2_even_odd = $this->calcOddAndEvenMost($ball_2_even_odd, "亚军-");
        $ball_2_dragon_tiger = $this->calcSumDragonTigerMost($ball_2_dragon_tiger, "亚军-");
        
        $ball_3_big_small = $this->calcBigAndSmallMost($ball_3_big_small, "第三名-");
        $ball_3_even_odd = $this->calcOddAndEvenMost($ball_3_even_odd, "第三名-");
        $ball_3_dragon_tiger = $this->calcSumDragonTigerMost($ball_3_dragon_tiger, "第三名-");
        
        $ball_4_big_small = $this->calcBigAndSmallMost($ball_4_big_small, "第四名-");
        $ball_4_even_odd = $this->calcOddAndEvenMost($ball_4_even_odd, "第四名-");
        $ball_4_dragon_tiger = $this->calcSumDragonTigerMost($ball_4_dragon_tiger, "第四名-");
        
        $ball_5_big_small = $this->calcBigAndSmallMost($ball_5_big_small, "第五名-");
        $ball_5_even_odd = $this->calcOddAndEvenMost($ball_5_even_odd, "第五名-");
        $ball_5_dragon_tiger = $this->calcSumDragonTigerMost($ball_5_dragon_tiger, "第五名-");
        
        $ball_6_big_small = $this->calcBigAndSmallMost($ball_6_big_small, "第六名-");
        $ball_6_even_odd = $this->calcOddAndEvenMost($ball_6_even_odd, "第六名-");
        
        $ball_7_big_small = $this->calcBigAndSmallMost($ball_7_big_small, "第七名-");
        $ball_7_even_odd = $this->calcOddAndEvenMost($ball_7_even_odd, "第七名-");
        
        $ball_8_big_small = $this->calcBigAndSmallMost($ball_8_big_small, "第八名-");
        $ball_8_even_odd = $this->calcOddAndEvenMost($ball_8_even_odd, "第八名-");
        
        $ball_9_big_small = $this->calcBigAndSmallMost($ball_9_big_small, "第九名-");
        $ball_9_even_odd = $this->calcOddAndEvenMost($ball_9_even_odd, "第九名-");
        
        $ball_10_big_small = $this->calcBigAndSmallMost($ball_10_big_small, "第十名-");
        $ball_10_even_odd = $this->calcOddAndEvenMost($ball_10_even_odd, "第十名-");

        $sum_big_small = $this->calcBigAndSmallMost($sum_big_small, "冠亚和值-");
        $sum_even_odd = $this->calcOddAndEvenMost($sum_even_odd, "冠亚和值-");

        $return = array_merge($ball_1_big_small, $ball_1_even_odd, $ball_2_big_small, 
                            $ball_2_even_odd, $ball_3_big_small, $ball_3_even_odd, 
                            $ball_4_big_small, $ball_4_even_odd, $ball_5_big_small, 
                            $ball_5_even_odd, $sum_big_small, $sum_even_odd,
                            $ball_1_dragon_tiger, $ball_2_dragon_tiger, $ball_3_dragon_tiger,
                            $ball_4_dragon_tiger, $ball_5_dragon_tiger);

        $newReturn = [];
        foreach ($return as $k => $item) {
            if (!empty($item)) {
                array_push($newReturn, $item);
            }
        }
        usort($newReturn, 'cmp_num');
        $this->jsonData['data'] = $newReturn;
        return $this->jsonData;
    }
    
    /**
     * 总和龙虎长龙统计
     *
     * @param array $array
     * @return array
     */
    private function calcSumDragonTigerMost($array, $prefix = "")
    {
        $calc_odd = []; // jishu
        $calc_even = []; // oushu
        $count_odd = 0;
        $count_even = 0;
        foreach ($array as $item) {
            if ($item === "龙") {
                $count_even++;
                $calc_odd[$count_odd][] = $item;
            } else {
                $count_odd++;
                $calc_even[$count_even][] = $item;
            }
        }
        $calc_odd = $this->genReturn($calc_odd, "龙", $prefix);
        $calc_even = $this->genReturn($calc_even, "虎", $prefix);
        return [$calc_odd, $calc_even];
    }


    /**
     * 奇偶长龙统计
     *
     * @param array $array
     * @return array
     */
    private function calcOddAndEvenMost($array, $prefix = "")
    {
        $calc_odd = []; // jishu
        $calc_even = []; // oushu
        $count_odd = 0;
        $count_even = 0;
        foreach ($array as $item) {
            if ($item === "单") {
                $count_even++;
                $calc_odd[$count_odd][] = $item;
            } else {
                $count_odd++;
                $calc_even[$count_even][] = $item;
            }
        }
        $calc_odd = $this->genReturn($calc_odd, "单", $prefix);
        $calc_even = $this->genReturn($calc_even, "双", $prefix);
        return [$calc_odd, $calc_even];
    }


    /**
     * 大小长龙统计
     *
     * @param array $array
     * @return array
     */
    private function calcBigAndSmallMost($array, $prefix = "")
    {
        $calc_big = []; // jishu
        $calc_small = []; // oushu
        $count_big = 0;
        $count_small = 0;
        foreach ($array as $item) {
            if ($item === "大") {
                $count_small++;
                $calc_big[$count_big][] = $item;
            } else {
                $count_big++;
                $calc_small[$count_small][] = $item;
            }
        }
        $calc_big = $this->genReturn($calc_big, "大", $prefix);
        $calc_small = $this->genReturn($calc_small, "小", $prefix);
        return [$calc_big, $calc_small];
    }

    /**
     * 统计最大出现期数，小于连续3期不出的不统计
     *
     * @param array $array
     * @param string $name
     * @return array
     */
    private function genReturn($array, $name, $prefix)
    {
        $newArray = [];
        foreach ($array as $item) {
            $num = count($item);
            $newItem['name'] = $prefix . $name;
            $newItem['num'] = $num;
            if ($num >= 3) {
                array_push($newArray, $newItem);
            }
        }
        
        if (empty($newArray) || is_null($newArray)) {
            $return = [];
        } else {
            usort($newArray, 'cmp_num');
            $return = $newArray[0];
        }
        return $return;
    }

}