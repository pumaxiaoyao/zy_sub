<?php
/**
 * Created by PhpStorm.
 * User: fish
 * Date: 2018/2/26
 * Time: 17:14
 */

namespace app\auth\controller;


use app\api\model\AccAuth;
use app\api\model\AccOnline;
use app\api\model\AccUri;
use app\api\model\AccUsers;
use Firebase\JWT\JWT;
use think\Config;
use think\Controller;
use Exception;

class AdminBaseController extends Controller
{
    protected $payload;

    protected $user;

    protected $token;

    protected $jsonData;

    protected $subUserTokens;

    protected function _initialize ()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        Config::load(APP_PATH . 'auth/config.php');
        $this->auth();
        $this->jsonData = ['status' => '200', 'msg' => 'success', 'data' => []];
    }

    /**
     * 用户认证
     * @return bool|mixed
     */
    protected function auth ()
    {
        try {
            $uri = request()->controller() . '/' . request()->action();
            $whiteList = config('admin_base_white_list');
            if (in_array($uri, $whiteList)) {
                return true;
            }

            $token = get_token(request());
            $this->token = $token;
            if (is_null($token)) {
                exit(json_encode(['status' => 403, 'msg' => '您已退出登录，请重新登录']));
            }
            $key = config('jwt_key');
            $obj_token = JWT::decode($token, $key, array('HS256'));
            $payload = json_decode(json_encode($obj_token), true);

            $user_id = $payload['user_id'];
            $user = AccUsers::get($user_id);
            $tokenint = $user->tokenint;

            if (0 == $user->status) {
                // 删除在线信息
                AccOnline::del($tokenint);

                cache($token, null);
                exit(json_encode(['status' => 403, 'msg' => '您被管理员加入黑名单，将被强制退出！']));
            }

            $cache_token = cache($tokenint);
            if (empty($cache_token)) {
                exit(json_encode(['status' => 0, 'msg' => '您已退出登录']));
            }
            if ($cache_token != $token) {
                exit(json_encode(['status' => 0, 'msg' => '您已在别处登录']));
            }

            if (isset($payload['is_admin']) && $payload['is_admin'] != 0) {

                // 刷新 online 表的操作时间
                AccOnline::updateTime($tokenint);

                $this->user = $user;
                $this->payload = $payload;
            } else {
                exit(json_encode(['status' => 0, 'msg' => '不是管理员，请重新登录']));
            }

            $this->subUserTokens();

            /**** 预留 api 权限判断 start *****/
            /** 新建、编辑、删除 子账号 */

            // 管理员不用检查权限
            if ($user->type !== 3) {
                $uri = get_route();
                $hasAuth = AccAuth::hasAuth($tokenint, $uri);
                if (!$hasAuth) {
                    $auth = AccUri::getOneByUri($uri);
                    exit(json_encode(['status' => 0, 'msg' => '没有 [' . $auth->mark . '] 的权限']));
                }
            }


            /**** end *****/


        } catch (Exception $e) {
            exit(json_encode(['status' => 0, 'msg' => $e->getMessage()]));
        }
    }

    /**
     * 生成JWT token
     *
     * @param $user
     *
     * @return string
     */
    protected function genJwtToken ($user)
    {
        $key = config('jwt_key');
        $payload = [
            'user_id' => $user->id,
            'username' => $user->username,
            'is_admin' => $user->type,
            'exp' => time() + KEEP_LOGIN_TIME,
        ];
        $token = JWT::encode($payload, $key);

        $user->tokenext = $token;
        $user->isUpdate()->save();

        cache($user->tokenint, $token, time() + KEEP_LOGIN_TIME);
        return $token;
    }

    /**
     * 刷新令牌
     * @return bool|string
     */
    protected function reGenerateToken ()
    {
        try {
            $token = $this->token;
            $key = config('jwt_key');
            $obj_token = JWT::decode($token, $key, array('HS256'));
            $arr = json_decode(json_encode($obj_token), true);
            if (is_array($arr)) {
                $user = AccUsers::get($arr['user_id']);
                cache($user->tokenint, $token, time());
                $new_token = $this->genJwtToken($user);
                return $new_token;
            }
        } catch (Exception $e) {
            return false;
        }
    }

    /**
     * 子用户内部密钥列表
     */
    protected function subUserTokens ()
    {
        $where = [];
        if (2 == $this->user->type) {
            $where['manager'] = $this->user->id;
        }
        if (1 == $this->user->type) {
            $where['agent'] = $this->user->id;
        }
        $tokenints = AccUsers::getTokenints($where);
        $this->subUserTokens = $tokenints;
    }
}
